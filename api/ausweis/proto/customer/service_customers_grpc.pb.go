// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: customer/service_customers.proto

package customer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CustomersService_GetCustomer_FullMethodName        = "/customer.CustomersService/GetCustomer"
	CustomersService_List_FullMethodName               = "/customer.CustomersService/List"
	CustomersService_IsEmailAvailable_FullMethodName   = "/customer.CustomersService/IsEmailAvailable"
	CustomersService_UpdateBasicDetails_FullMethodName = "/customer.CustomersService/UpdateBasicDetails"
	CustomersService_UpdateBlockStatus_FullMethodName  = "/customer.CustomersService/UpdateBlockStatus"
	CustomersService_LandCustomer_FullMethodName       = "/customer.CustomersService/LandCustomer"
	CustomersService_ChangeEmail_FullMethodName        = "/customer.CustomersService/ChangeEmail"
)

// CustomersServiceClient is the client API for CustomersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomersServiceClient interface {
	GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...grpc.CallOption) (*Customer, error)
	List(ctx context.Context, in *ListCustomerRequest, opts ...grpc.CallOption) (*CustomersList, error)
	IsEmailAvailable(ctx context.Context, in *EmailFreeRequest, opts ...grpc.CallOption) (*EmailFreeResponse, error)
	UpdateBasicDetails(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*Customer, error)
	UpdateBlockStatus(ctx context.Context, in *UpdateBlockRequest, opts ...grpc.CallOption) (*Customer, error)
	LandCustomer(ctx context.Context, in *LandCustomerRequest, opts ...grpc.CallOption) (*Customer, error)
	ChangeEmail(ctx context.Context, in *ChangeEmailRequest, opts ...grpc.CallOption) (*Customer, error)
}

type customersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomersServiceClient(cc grpc.ClientConnInterface) CustomersServiceClient {
	return &customersServiceClient{cc}
}

func (c *customersServiceClient) GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...grpc.CallOption) (*Customer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Customer)
	err := c.cc.Invoke(ctx, CustomersService_GetCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersServiceClient) List(ctx context.Context, in *ListCustomerRequest, opts ...grpc.CallOption) (*CustomersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomersList)
	err := c.cc.Invoke(ctx, CustomersService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersServiceClient) IsEmailAvailable(ctx context.Context, in *EmailFreeRequest, opts ...grpc.CallOption) (*EmailFreeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmailFreeResponse)
	err := c.cc.Invoke(ctx, CustomersService_IsEmailAvailable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersServiceClient) UpdateBasicDetails(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*Customer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Customer)
	err := c.cc.Invoke(ctx, CustomersService_UpdateBasicDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersServiceClient) UpdateBlockStatus(ctx context.Context, in *UpdateBlockRequest, opts ...grpc.CallOption) (*Customer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Customer)
	err := c.cc.Invoke(ctx, CustomersService_UpdateBlockStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersServiceClient) LandCustomer(ctx context.Context, in *LandCustomerRequest, opts ...grpc.CallOption) (*Customer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Customer)
	err := c.cc.Invoke(ctx, CustomersService_LandCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersServiceClient) ChangeEmail(ctx context.Context, in *ChangeEmailRequest, opts ...grpc.CallOption) (*Customer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Customer)
	err := c.cc.Invoke(ctx, CustomersService_ChangeEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomersServiceServer is the server API for CustomersService service.
// All implementations must embed UnimplementedCustomersServiceServer
// for forward compatibility.
type CustomersServiceServer interface {
	GetCustomer(context.Context, *GetCustomerRequest) (*Customer, error)
	List(context.Context, *ListCustomerRequest) (*CustomersList, error)
	IsEmailAvailable(context.Context, *EmailFreeRequest) (*EmailFreeResponse, error)
	UpdateBasicDetails(context.Context, *UpdateCustomerRequest) (*Customer, error)
	UpdateBlockStatus(context.Context, *UpdateBlockRequest) (*Customer, error)
	LandCustomer(context.Context, *LandCustomerRequest) (*Customer, error)
	ChangeEmail(context.Context, *ChangeEmailRequest) (*Customer, error)
	mustEmbedUnimplementedCustomersServiceServer()
}

// UnimplementedCustomersServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCustomersServiceServer struct{}

func (UnimplementedCustomersServiceServer) GetCustomer(context.Context, *GetCustomerRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomer not implemented")
}
func (UnimplementedCustomersServiceServer) List(context.Context, *ListCustomerRequest) (*CustomersList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCustomersServiceServer) IsEmailAvailable(context.Context, *EmailFreeRequest) (*EmailFreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsEmailAvailable not implemented")
}
func (UnimplementedCustomersServiceServer) UpdateBasicDetails(context.Context, *UpdateCustomerRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBasicDetails not implemented")
}
func (UnimplementedCustomersServiceServer) UpdateBlockStatus(context.Context, *UpdateBlockRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlockStatus not implemented")
}
func (UnimplementedCustomersServiceServer) LandCustomer(context.Context, *LandCustomerRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LandCustomer not implemented")
}
func (UnimplementedCustomersServiceServer) ChangeEmail(context.Context, *ChangeEmailRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEmail not implemented")
}
func (UnimplementedCustomersServiceServer) mustEmbedUnimplementedCustomersServiceServer() {}
func (UnimplementedCustomersServiceServer) testEmbeddedByValue()                          {}

// UnsafeCustomersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomersServiceServer will
// result in compilation errors.
type UnsafeCustomersServiceServer interface {
	mustEmbedUnimplementedCustomersServiceServer()
}

func RegisterCustomersServiceServer(s grpc.ServiceRegistrar, srv CustomersServiceServer) {
	// If the following call pancis, it indicates UnimplementedCustomersServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CustomersService_ServiceDesc, srv)
}

func _CustomersService_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServiceServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomersService_GetCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServiceServer).GetCustomer(ctx, req.(*GetCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomersService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomersService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServiceServer).List(ctx, req.(*ListCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomersService_IsEmailAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailFreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServiceServer).IsEmailAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomersService_IsEmailAvailable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServiceServer).IsEmailAvailable(ctx, req.(*EmailFreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomersService_UpdateBasicDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServiceServer).UpdateBasicDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomersService_UpdateBasicDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServiceServer).UpdateBasicDetails(ctx, req.(*UpdateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomersService_UpdateBlockStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServiceServer).UpdateBlockStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomersService_UpdateBlockStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServiceServer).UpdateBlockStatus(ctx, req.(*UpdateBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomersService_LandCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LandCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServiceServer).LandCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomersService_LandCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServiceServer).LandCustomer(ctx, req.(*LandCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomersService_ChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServiceServer).ChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomersService_ChangeEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServiceServer).ChangeEmail(ctx, req.(*ChangeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomersService_ServiceDesc is the grpc.ServiceDesc for CustomersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer.CustomersService",
	HandlerType: (*CustomersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCustomer",
			Handler:    _CustomersService_GetCustomer_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CustomersService_List_Handler,
		},
		{
			MethodName: "IsEmailAvailable",
			Handler:    _CustomersService_IsEmailAvailable_Handler,
		},
		{
			MethodName: "UpdateBasicDetails",
			Handler:    _CustomersService_UpdateBasicDetails_Handler,
		},
		{
			MethodName: "UpdateBlockStatus",
			Handler:    _CustomersService_UpdateBlockStatus_Handler,
		},
		{
			MethodName: "LandCustomer",
			Handler:    _CustomersService_LandCustomer_Handler,
		},
		{
			MethodName: "ChangeEmail",
			Handler:    _CustomersService_ChangeEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer/service_customers.proto",
}
