// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: address/service.proto

package address

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AddressService_GetBillingAddress_FullMethodName            = "/address.AddressService/GetBillingAddress"
	AddressService_GetShippingAddress_FullMethodName           = "/address.AddressService/GetShippingAddress"
	AddressService_CreateBillingAddress_FullMethodName         = "/address.AddressService/CreateBillingAddress"
	AddressService_CreateShippingAddress_FullMethodName        = "/address.AddressService/CreateShippingAddress"
	AddressService_UpdateShippingAddress_FullMethodName        = "/address.AddressService/UpdateShippingAddress"
	AddressService_UpdateDefaultShippingAddress_FullMethodName = "/address.AddressService/UpdateDefaultShippingAddress"
	AddressService_DeleteShippingAddress_FullMethodName        = "/address.AddressService/DeleteShippingAddress"
	AddressService_ListShippingAddresses_FullMethodName        = "/address.AddressService/ListShippingAddresses"
	AddressService_ListBillingAddresses_FullMethodName         = "/address.AddressService/ListBillingAddresses"
)

// AddressServiceClient is the client API for AddressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddressServiceClient interface {
	GetBillingAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*BillingAddress, error)
	GetShippingAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*ShippingAddress, error)
	CreateBillingAddress(ctx context.Context, in *BillingAddressRequest, opts ...grpc.CallOption) (*BillingAddress, error)
	CreateShippingAddress(ctx context.Context, in *ShippingAddressRequest, opts ...grpc.CallOption) (*ShippingAddress, error)
	UpdateShippingAddress(ctx context.Context, in *ShippingAddressRequest, opts ...grpc.CallOption) (*ShippingAddress, error)
	UpdateDefaultShippingAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*Nil, error)
	DeleteShippingAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*Nil, error)
	ListShippingAddresses(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*List, error)
	ListBillingAddresses(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*List, error)
}

type addressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressServiceClient(cc grpc.ClientConnInterface) AddressServiceClient {
	return &addressServiceClient{cc}
}

func (c *addressServiceClient) GetBillingAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*BillingAddress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BillingAddress)
	err := c.cc.Invoke(ctx, AddressService_GetBillingAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetShippingAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*ShippingAddress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShippingAddress)
	err := c.cc.Invoke(ctx, AddressService_GetShippingAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) CreateBillingAddress(ctx context.Context, in *BillingAddressRequest, opts ...grpc.CallOption) (*BillingAddress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BillingAddress)
	err := c.cc.Invoke(ctx, AddressService_CreateBillingAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) CreateShippingAddress(ctx context.Context, in *ShippingAddressRequest, opts ...grpc.CallOption) (*ShippingAddress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShippingAddress)
	err := c.cc.Invoke(ctx, AddressService_CreateShippingAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) UpdateShippingAddress(ctx context.Context, in *ShippingAddressRequest, opts ...grpc.CallOption) (*ShippingAddress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShippingAddress)
	err := c.cc.Invoke(ctx, AddressService_UpdateShippingAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) UpdateDefaultShippingAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*Nil, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Nil)
	err := c.cc.Invoke(ctx, AddressService_UpdateDefaultShippingAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) DeleteShippingAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*Nil, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Nil)
	err := c.cc.Invoke(ctx, AddressService_DeleteShippingAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) ListShippingAddresses(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*List, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(List)
	err := c.cc.Invoke(ctx, AddressService_ListShippingAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) ListBillingAddresses(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*List, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(List)
	err := c.cc.Invoke(ctx, AddressService_ListBillingAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressServiceServer is the server API for AddressService service.
// All implementations must embed UnimplementedAddressServiceServer
// for forward compatibility.
type AddressServiceServer interface {
	GetBillingAddress(context.Context, *AddressRequest) (*BillingAddress, error)
	GetShippingAddress(context.Context, *AddressRequest) (*ShippingAddress, error)
	CreateBillingAddress(context.Context, *BillingAddressRequest) (*BillingAddress, error)
	CreateShippingAddress(context.Context, *ShippingAddressRequest) (*ShippingAddress, error)
	UpdateShippingAddress(context.Context, *ShippingAddressRequest) (*ShippingAddress, error)
	UpdateDefaultShippingAddress(context.Context, *AddressRequest) (*Nil, error)
	DeleteShippingAddress(context.Context, *AddressRequest) (*Nil, error)
	ListShippingAddresses(context.Context, *CustomerRequest) (*List, error)
	ListBillingAddresses(context.Context, *CustomerRequest) (*List, error)
	mustEmbedUnimplementedAddressServiceServer()
}

// UnimplementedAddressServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAddressServiceServer struct{}

func (UnimplementedAddressServiceServer) GetBillingAddress(context.Context, *AddressRequest) (*BillingAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingAddress not implemented")
}
func (UnimplementedAddressServiceServer) GetShippingAddress(context.Context, *AddressRequest) (*ShippingAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShippingAddress not implemented")
}
func (UnimplementedAddressServiceServer) CreateBillingAddress(context.Context, *BillingAddressRequest) (*BillingAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBillingAddress not implemented")
}
func (UnimplementedAddressServiceServer) CreateShippingAddress(context.Context, *ShippingAddressRequest) (*ShippingAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShippingAddress not implemented")
}
func (UnimplementedAddressServiceServer) UpdateShippingAddress(context.Context, *ShippingAddressRequest) (*ShippingAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShippingAddress not implemented")
}
func (UnimplementedAddressServiceServer) UpdateDefaultShippingAddress(context.Context, *AddressRequest) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDefaultShippingAddress not implemented")
}
func (UnimplementedAddressServiceServer) DeleteShippingAddress(context.Context, *AddressRequest) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShippingAddress not implemented")
}
func (UnimplementedAddressServiceServer) ListShippingAddresses(context.Context, *CustomerRequest) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShippingAddresses not implemented")
}
func (UnimplementedAddressServiceServer) ListBillingAddresses(context.Context, *CustomerRequest) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBillingAddresses not implemented")
}
func (UnimplementedAddressServiceServer) mustEmbedUnimplementedAddressServiceServer() {}
func (UnimplementedAddressServiceServer) testEmbeddedByValue()                        {}

// UnsafeAddressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressServiceServer will
// result in compilation errors.
type UnsafeAddressServiceServer interface {
	mustEmbedUnimplementedAddressServiceServer()
}

func RegisterAddressServiceServer(s grpc.ServiceRegistrar, srv AddressServiceServer) {
	// If the following call pancis, it indicates UnimplementedAddressServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AddressService_ServiceDesc, srv)
}

func _AddressService_GetBillingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetBillingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_GetBillingAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetBillingAddress(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetShippingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetShippingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_GetShippingAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetShippingAddress(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_CreateBillingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).CreateBillingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_CreateBillingAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).CreateBillingAddress(ctx, req.(*BillingAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_CreateShippingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).CreateShippingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_CreateShippingAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).CreateShippingAddress(ctx, req.(*ShippingAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_UpdateShippingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).UpdateShippingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_UpdateShippingAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).UpdateShippingAddress(ctx, req.(*ShippingAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_UpdateDefaultShippingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).UpdateDefaultShippingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_UpdateDefaultShippingAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).UpdateDefaultShippingAddress(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_DeleteShippingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).DeleteShippingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_DeleteShippingAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).DeleteShippingAddress(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_ListShippingAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).ListShippingAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_ListShippingAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).ListShippingAddresses(ctx, req.(*CustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_ListBillingAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).ListBillingAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_ListBillingAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).ListBillingAddresses(ctx, req.(*CustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AddressService_ServiceDesc is the grpc.ServiceDesc for AddressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "address.AddressService",
	HandlerType: (*AddressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBillingAddress",
			Handler:    _AddressService_GetBillingAddress_Handler,
		},
		{
			MethodName: "GetShippingAddress",
			Handler:    _AddressService_GetShippingAddress_Handler,
		},
		{
			MethodName: "CreateBillingAddress",
			Handler:    _AddressService_CreateBillingAddress_Handler,
		},
		{
			MethodName: "CreateShippingAddress",
			Handler:    _AddressService_CreateShippingAddress_Handler,
		},
		{
			MethodName: "UpdateShippingAddress",
			Handler:    _AddressService_UpdateShippingAddress_Handler,
		},
		{
			MethodName: "UpdateDefaultShippingAddress",
			Handler:    _AddressService_UpdateDefaultShippingAddress_Handler,
		},
		{
			MethodName: "DeleteShippingAddress",
			Handler:    _AddressService_DeleteShippingAddress_Handler,
		},
		{
			MethodName: "ListShippingAddresses",
			Handler:    _AddressService_ListShippingAddresses_Handler,
		},
		{
			MethodName: "ListBillingAddresses",
			Handler:    _AddressService_ListBillingAddresses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "address/service.proto",
}
